<?php

/**
 * @file
 * Provides shorthand to allow easy use of image fields in Markdown.
 */

/**
 * Implements hook_filter_info().
 */
function markdown_image_filter_info() {
  $filters['filter_markdown_image'] = array(
    'title' => t('Markdown inline images'),
    'description' => t('Provides shorthand to allow easy use of image fields in Markdown.'),
    'process callback' => 'markdown_image_filter_markdown_image_process',
  );
  return $filters;
}

/**
 * Implements hook_field_attach_presave().
 */
function markdown_image_field_attach_presave($entity_type, $entity) {
  $language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
  $bundle = field_extract_bundle($entity_type, $entity);
  $instances = field_info_instances($entity_type, $bundle);

  foreach ($instances as $name => $instance) {
    if (!(isset($instance['settings']['text_processing']) && $instance['settings']['text_processing'])) {
      continue;
    }

    $items = field_get_items($entity_type, $entity, $instance['field_name']);

    if (!is_array($items)) {
      continue;
    }

    foreach ($items as $key => $item) {
      $image_fields = markdown_image_get_image_fields($entity_type, $entity);
      $parser = new MarkdownImageFieldParser($entity_type, $entity, $image_fields);
      $text = $entity->{$instance['field_name']}[$language][$key]['value'];
      $text = $parser->doImages($text);
      $text = $parser->unhash($text);
      $entity->{$instance['field_name']}[$language][$key]['value'] = $text;
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function markdown_image_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $bundle = field_extract_bundle($entity_type, $entity);
  $instances = field_info_instances($entity_type, $bundle);

  foreach ($instances as $name => $instance) {
    if (!(isset($instance['settings']['text_processing']) && $instance['settings']['text_processing'])) {
      continue;
    }
    
    $items = field_get_items($entity_type, $entity, $instance['field_name']);

    if (!is_array($items)) {
      continue;
    }

    foreach ($items as $key => $item) {
      $field_name = $instance['field_name'];
      $form[$field_name][$langcode][$key]['#default_value'] = preg_replace_callback('@\[markdown_image:(.+?)\]@', '_markdown_image_revert_tag', $entity->{$instance['field_name']}[$langcode][$key]['value']);
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function markdown_image_entity_view_alter(&$build) {
  $bundle = $build['#bundle'];
  $entity_type = $build['#entity_type'];
  $langcode = $build['#language'];

  if (!isset($build['#' . $entity_type])) {
    return;
  }

  $entity = $build['#' . $entity_type];

  foreach ($build as $property) {
    if (!(is_array($property) && isset($property['#field_name']))) {
      continue;
    }

    $item_field_name = $property['#field_name'];
    $instance = field_info_instance($entity_type, $item_field_name, $bundle);
    
    if (!(isset($instance['settings']['text_processing']) && $instance['settings']['text_processing'])) {
      continue;
    }

    $items = field_get_items($entity_type, $entity, $item_field_name);

    if (!is_array($items)) {
      continue;
    }
    
    foreach ($items as $key => $item) {
      preg_match_all('@\[markdown_image:(.+?)\]@', $item['value'], $matches);
      if (!isset($matches[1][0])) {
        return;
      }

      $text = $build[$item_field_name][$key]['#markup'];
      foreach ($matches[1] as $match_key => $match) {
        list($entity_type, $entity_id, $field_name, $index, $alt_text) = explode(':', $match);
        
        if (!isset($build[$field_name])) {
          $replace = '';
        }
        else {
          $options = array(
            'path' => $build[$field_name][$index]['#item']['uri'],
            'alt' => $alt_text,
            'title' => $alt_text,
            'getsize' => TRUE,
            'attributes' => array(
              'class' => array(
                'field-' . $field_name,
                $index % 2 == 0 ? 'even' : 'odd',
              ),
            ),
          );

          // Colorbox support.
          if (isset($build[$field_name][$index]['#colorbox_node_style'])) {
            $options['style_name'] = $build[$field_name][$index]['#colorbox_node_style'];
            $options['image'] = $options;

            $scheme = file_uri_scheme($options['image']['path']);
            $files_directory = variable_get('file_' . $scheme . '_path', 'sites/default/files');
            $options['path'] = $files_directory . '/' . file_uri_target($options['image']['path']);

            $theme_name = 'colorbox_imagefield';
          }
          else {
            $options['style_name'] = $build[$field_name][$index]['#image_style'];
            $theme_name = 'image_style';
          }
          $replace = theme($theme_name, $options);
        }
        $text = str_replace($matches[0][$match_key], $replace, $text);
      }
      $build[$item_field_name][$key]['#markup'] = $text;
    }
  }
}

/**
 * Retrieve list of fields that contain images.
 *
 * @param $entity
 *   An Entity object containing fields.
 *
 * @return
 *   An array containing the field names of image fields attached to the entity.
 */
function markdown_image_get_image_fields($entity_type, $entity) {
  $field_names = array();
  $bundle = field_extract_bundle($entity_type, $entity);
  $instances = field_info_instances($entity_type, $bundle);

  foreach ($instances as $name => $instance) {
    if ($instance['widget']['type'] === 'image_image') {
      $field_names[] = $instance['field_name'];
    }
  }
  return $field_names;
}

/**
 * Revert an internal token to a user-facing shortcut
 *
 * @param $matches
 *   An array of matches from preg_replace_callback().
 *
 * @return
 *   A string containing the reverted shortcuts.
 */
function _markdown_image_revert_tag($matches) {
  $attributes = explode(':', $matches[1]);
  $alt_text = $attributes[4];
  $field_name = $attributes[2];
  $index = $attributes[3] + 1;
  return '![' . $alt_text . '](' . $field_name . ':' . $index . ')';
}

function markdown_image_filter_markdown_image_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  return $text;
}
